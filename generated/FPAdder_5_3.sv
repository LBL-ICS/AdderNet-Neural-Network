// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module LZC(	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:221:7
  input  [3:0] io_in,	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:222:14
  output [2:0] io_out	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:222:14
);

  assign io_out = {1'h0, io_in[3] ? 2'h0 : io_in[2] ? 2'h1 : {1'h1, ~(io_in[1])}};	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:221:7, :227:{10,35}, src/main/scala/chisel3/util/Mux.scala:50:70
endmodule

module FPAdder_5_3(	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
  input        clock,	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
               reset,	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
  input  [4:0] io_in_a,	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:232:14
               io_in_b,	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:232:14
  input        io_valid_in,	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:232:14
  output [4:0] io_out,	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:232:14
  output       io_valid_out	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:232:14
);

  wire [2:0]  _lzc_io_out;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:280:19
  wire [2:0]  normFracA = {1'h1, io_in_a[1:0]};	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :246:22, :253:22
  wire [2:0]  normFracB = {1'h1, io_in_b[1:0]};	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :250:22, :254:22
  wire        expAGtB = io_in_a[3:2] > io_in_b[3:2];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:245:21, :249:21, :258:22
  wire [2:0]  expDiff =
    {1'h0, expAGtB ? io_in_a[3:2] - io_in_b[3:2] : io_in_b[3:2] - io_in_a[3:2]};	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :245:21, :249:21, :258:22, :259:{11,17,32,45}
  wire [1:0]  _GEN = expAGtB ? io_in_a[1:0] : io_in_b[1:0];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:246:22, :250:22, :258:22, :265:17, :266:18, :270:18
  wire [2:0]  _GEN_0 = expAGtB ? normFracB >> expDiff : normFracA >> expDiff;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:253:22, :254:22, :258:22, :259:11, :265:17, :267:{18,31}, :271:{18,31}
  wire [1:0]  expOut = expAGtB ? io_in_a[3:2] : io_in_b[3:2];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:245:21, :249:21, :258:22, :265:17, :268:12, :272:12
  wire [3:0]  _fracSum_T = {2'h1, _GEN} + {1'h0, _GEN_0};	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :265:17, :266:18, :267:18, :270:18, :271:18, :276:30
  wire        _GEN_1 = ~(_fracSum_T[3]) & _fracSum_T[2];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:30, :277:25, :291:{37,45,55}
  wire [10:0] _shiftedFrac_T_1 = {7'h0, _fracSum_T} << _lzc_io_out;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:30, :280:19, :297:28
  wire [1:0]  shiftedFrac =
    _fracSum_T[3] ? _fracSum_T[2:1] : _GEN_1 ? _fracSum_T[1:0] : _shiftedFrac_T_1[1:0];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:30, :277:25, :287:18, :289:17, :291:{45,76}, :293:17, :297:{17,28}
  wire [1:0]  newExp =
    _fracSum_T[3]
      ? expOut + 2'h1
      : _GEN_1
          ? expOut
          : {1'h0, expOut} >= _lzc_io_out ? expOut - _lzc_io_out[1:0] : 2'h0;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :265:17, :266:18, :268:12, :272:12, :276:30, :277:25, :280:19, :287:18, :290:{12,22}, :291:{45,76}, :294:12, :298:{12,18,26,46}
  wire [4:0]  result = {1'h0, newExp, shiftedFrac};	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :287:18, :289:17, :290:12, :291:76, :304:19
  reg         sr_valid_0;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:307:25
  reg         sr_valid_1;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:307:25
  reg         sr_valid_2;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:307:25
  reg  [4:0]  sr_data_0;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:308:20
  reg  [4:0]  sr_data_1;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:308:20
  reg  [4:0]  sr_data_2;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:308:20
  `ifndef SYNTHESIS	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11
    always @(posedge clock) begin	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11
      automatic logic _GEN_2 = io_valid_in & ~(_fracSum_T[3]);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:30, :277:25, :291:37, :345:20
      automatic logic _GEN_3 = (`PRINTF_COND_) & io_valid_in & ~reset;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11
      if (_GEN_3) begin	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11, :344:11
        $fwrite(32'h80000002, "[STEP 1: Extract Fields]\n");	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11
        $fwrite(32'h80000002, "  A = %b => signA: %b | expA: %b | fracA: %b\n", io_in_a,
                io_in_a[4], io_in_a[3:2], io_in_a[1:0]);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:244:22, :245:21, :246:22, :327:11, :328:11
        $fwrite(32'h80000002, "  B = %b => signB: %b | expB: %b | fracB: %b\n", io_in_b,
                io_in_b[4], io_in_b[3:2], io_in_b[1:0]);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:248:22, :249:21, :250:22, :327:11, :329:11
        $fwrite(32'h80000002, "[STEP 2: Compare Exponents]\n");	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11, :331:11
        $fwrite(32'h80000002, "  expA: %d, expB: %d\n", io_in_a[3:2], io_in_b[3:2]);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:245:21, :249:21, :327:11, :332:11
        $fwrite(32'h80000002, "  expDiff: %d => expAGtB: %b\n", expDiff, expAGtB);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:258:22, :259:11, :327:11, :333:11
        $fwrite(32'h80000002, "[STEP 3: Align Mantissas]\n");	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11, :335:11
        $fwrite(32'h80000002, "  normFracA (with hidden 1): %b\n", normFracA);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:253:22, :327:11, :336:11
        $fwrite(32'h80000002, "  normFracB (with hidden 1): %b\n", normFracB);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:254:22, :327:11, :337:11
        $fwrite(32'h80000002, "  alignedLarge: %b | alignedSmall: %b\n", {2'h1, _GEN},
                {1'h0, _GEN_0});	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :265:17, :266:18, :267:18, :270:18, :271:18, :327:11, :338:11
        $fwrite(32'h80000002, "  selectedExpOut: %d\n", expOut);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:265:17, :268:12, :272:12, :327:11, :339:11
        $fwrite(32'h80000002, "[STEP 4: Add Aligned Mantissas]\n");	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11, :341:11
        $fwrite(32'h80000002, "  sum: %b (carryOut = %b)\n", _fracSum_T, _fracSum_T[3]);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:30, :277:25, :327:11, :342:11
        $fwrite(32'h80000002, "[STEP 5: Normalize Result]\n");	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11, :344:11
      end
      if ((`PRINTF_COND_) & io_valid_in & _fracSum_T[3] & ~reset)	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:30, :277:25, :327:11, :346:13
        $fwrite(32'h80000002, "  CarryOut = 1 => shift right by 1\n");	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11, :346:13
      if ((`PRINTF_COND_) & _GEN_2 & _GEN_1 & ~reset)	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:291:45, :327:11, :345:20, :348:13
        $fwrite(32'h80000002, "  Already normalized => no shift needed\n");	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11, :348:13
      if ((`PRINTF_COND_) & _GEN_2 & ~_GEN_1 & ~reset)	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:291:45, :327:11, :345:20, :347:78, :350:13
        $fwrite(32'h80000002, "  No CarryOut => LZC = %d | shift left\n", _lzc_io_out);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:280:19, :327:11, :350:13
      if (_GEN_3) begin	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11, :357:11
        $fwrite(32'h80000002, "  normFrac: %b | normExp: %d\n", shiftedFrac, newExp);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:287:18, :289:17, :290:12, :291:76, :327:11, :352:11
        $fwrite(32'h80000002, "[STEP 6: Final Result Reassembly]\n");	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:327:11, :354:11
        $fwrite(32'h80000002, "  Final result = %b\n", result);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:304:19, :327:11, :355:11
        $fwrite(32'h80000002,
                "[Cycle Info] bw = %d | pd = %d => valid_out: %b | output: %b\n", 3'h5,
                2'h3, sr_valid_2, sr_data_2);	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:307:25, :308:20, :327:11, :357:11
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
    if (reset) begin	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
      sr_valid_0 <= 1'h0;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :307:25
      sr_valid_1 <= 1'h0;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :307:25
      sr_valid_2 <= 1'h0;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :307:25
    end
    else begin	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
      sr_valid_0 <= io_valid_in;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:307:25
      sr_valid_1 <= sr_valid_0;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:307:25
      sr_valid_2 <= sr_valid_1;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:307:25
    end
    if (io_valid_in)	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:232:14
      sr_data_0 <= result;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:304:19, :308:20
    sr_data_1 <= sr_data_0;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:308:20
    sr_data_2 <= sr_data_1;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:308:20
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
      `FIRRTL_BEFORE_INITIAL	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
      automatic logic [31:0] _RANDOM[0:0];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
      `ifdef INIT_RANDOM_PROLOG_	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
        `INIT_RANDOM_PROLOG_	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
        sr_valid_0 = _RANDOM[/*Zero width*/ 1'b0][0];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :307:25
        sr_valid_1 = _RANDOM[/*Zero width*/ 1'b0][1];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :307:25
        sr_valid_2 = _RANDOM[/*Zero width*/ 1'b0][2];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :307:25
        sr_data_0 = _RANDOM[/*Zero width*/ 1'b0][7:3];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :307:25, :308:20
        sr_data_1 = _RANDOM[/*Zero width*/ 1'b0][12:8];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :307:25, :308:20
        sr_data_2 = _RANDOM[/*Zero width*/ 1'b0][17:13];	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :307:25, :308:20
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
      `FIRRTL_AFTER_INITIAL	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  LZC lzc (	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:280:19
    .io_in  (_fracSum_T),	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:30
    .io_out (_lzc_io_out)
  );
  assign io_out = sr_data_2;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :308:20
  assign io_valid_out = sr_valid_2;	// \\OneDrive\\Desktop\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:230:7, :307:25
endmodule

