// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FP4Adder(	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
  input        clock,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
               reset,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
               io_in_en,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:205:14
               io_in_valid,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:205:14
  input  [3:0] io_a,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:205:14
               io_b,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:205:14
  output [3:0] io_out,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:205:14
  output       io_out_valid	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:205:14
);

  reg       out_valid_reg_r;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:36
  reg       out_valid_reg_r_1;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:36
  reg       out_valid_reg;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:36
  reg [3:0] result_reg_r;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:277:36
  reg [3:0] result_reg_r_1;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:277:36
  reg [3:0] result_reg;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:277:36
  always @(posedge clock) begin	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
    if (io_in_en) begin	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:205:14
      automatic logic       a_is_zero = io_a == 4'h0;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:219:24, :273:19
      automatic logic       b_is_zero = io_b == 4'h0;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:220:24, :273:19
      automatic logic [2:0] a_man = a_is_zero ? 3'h0 : {1'h1, io_a[1:0]};	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7, :219:24, :225:{18,38,53}
      automatic logic [2:0] b_man = b_is_zero ? 3'h0 : {1'h1, io_b[1:0]};	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7, :220:24, :225:18, :226:{18,38,53}
      automatic logic [1:0] _exp_diff_T_2 = io_a[3:2] - io_b[3:2];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:223:19, :224:19, :229:32
      automatic logic       _GEN = _exp_diff_T_2 == 2'h1;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:229:32, :236:17
      automatic logic [1:0] aligned_exp = _GEN ? io_a[3:2] : io_b[3:2];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:223:19, :224:19, :236:{17,24}, :239:19, :243:19
      automatic logic [2:0] _sum_man_T =
        (_GEN ? a_man : a_man >> 2'h0 - _exp_diff_T_2)
        + (_GEN ? b_man >> _exp_diff_T_2 : b_man);	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:225:18, :226:18, :229:32, :236:{17,24}, :237:19, :238:{19,28}, :241:{19,28,32}, :242:19, :247:31
      out_valid_reg_r <= io_in_valid;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:36
      out_valid_reg_r_1 <= out_valid_reg_r;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:36
      out_valid_reg <= out_valid_reg_r_1;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:276:36
      result_reg_r <=
        a_is_zero & b_is_zero
          ? 4'h0
          : {_sum_man_T[2] ? ((&aligned_exp) ? 2'h3 : aligned_exp + 2'h1) : aligned_exp,
             _sum_man_T[2] ? _sum_man_T[2:1] : _sum_man_T[1:0]};	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:219:24, :220:24, :236:{17,24}, :239:19, :243:19, :247:31, :250:26, :256:27, :258:{18,28}, :259:{22,35,67}, :260:14, :262:{18,28}, :263:14, :272:29, :273:{19,39}, :277:36
      result_reg_r_1 <= result_reg_r;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:277:36
      result_reg <= result_reg_r_1;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:277:36
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
      `FIRRTL_BEFORE_INITIAL	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
      automatic logic [31:0] _RANDOM[0:0];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
      `ifdef INIT_RANDOM_PROLOG_	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
        `INIT_RANDOM_PROLOG_	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
        out_valid_reg_r = _RANDOM[/*Zero width*/ 1'b0][0];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7, :276:36
        out_valid_reg_r_1 = _RANDOM[/*Zero width*/ 1'b0][1];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7, :276:36
        out_valid_reg = _RANDOM[/*Zero width*/ 1'b0][2];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7, :276:36
        result_reg_r = _RANDOM[/*Zero width*/ 1'b0][6:3];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7, :276:36, :277:36
        result_reg_r_1 = _RANDOM[/*Zero width*/ 1'b0][10:7];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7, :276:36, :277:36
        result_reg = _RANDOM[/*Zero width*/ 1'b0][14:11];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7, :276:36, :277:36
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
      `FIRRTL_AFTER_INITIAL	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out = result_reg;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7, :277:36
  assign io_out_valid = out_valid_reg;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:201:7, :276:36
endmodule

