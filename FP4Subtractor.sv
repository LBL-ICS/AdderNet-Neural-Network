// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FP4Subtractor(	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
  input        clock,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
               reset,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
               io_in_en,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:287:14
               io_in_valid,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:287:14
  input  [3:0] io_a,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:287:14
               io_b,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:287:14
  output [3:0] io_out,	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:287:14
  output       io_out_valid	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:287:14
);

  reg [3:0] result_reg_r;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:383:33
  reg [3:0] result_reg_r_1;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:383:33
  reg [3:0] result_reg;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:383:33
  reg       valid_reg_r;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:384:32
  reg       valid_reg_r_1;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:384:32
  reg       valid_reg;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:384:32
  always @(posedge clock) begin	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
    if (io_in_en) begin	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:287:14
      automatic logic [2:0] a_man = io_a[3:2] == 2'h0 ? 3'h0 : {1'h1, io_a[1:0]};	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7, :305:23, :307:23, :311:{18,29,64}, :376:21
      automatic logic [2:0] b_man = io_b[3:2] == 2'h0 ? 3'h0 : {1'h1, io_b[1:0]};	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7, :306:23, :308:23, :311:18, :312:{18,29,64}, :376:21
      automatic logic [1:0] _a_exp_T = io_a[3:2] - 2'h2;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:305:23, :315:25
      automatic logic [1:0] _b_exp_T = io_b[3:2] - 2'h2;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:306:23, :316:25
      automatic logic [1:0] _exp_diff_T_2 = _a_exp_T - _b_exp_T;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:315:25, :316:25, :319:32
      automatic logic       _GEN = $signed(_exp_diff_T_2) > -2'sh1;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:319:32, :326:17
      automatic logic [2:0] _diff_sint_T_2 =
        (_GEN ? a_man : a_man >> 2'h0 - _exp_diff_T_2)
        - (_GEN ? b_man >> _exp_diff_T_2 : b_man);	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:311:18, :312:18, :319:32, :326:{17,25}, :327:19, :328:{19,28}, :331:{19,28,32}, :332:19, :337:40, :376:21
      automatic logic [2:0] abs_diff =
        $signed(_diff_sint_T_2) < 3'sh0 ? 3'h0 - _diff_sint_T_2 : _diff_sint_T_2;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:311:18, :326:17, :337:40, :340:{21,32,40}
      automatic logic       zero_result = abs_diff == 3'h0;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:311:18, :340:21, :343:30
      automatic logic [1:0] lzc =
        abs_diff[2:1] == 2'h0
          ? {1'h0, ~(abs_diff[0])} - 2'h2
          : {1'h0, abs_diff[2] ? ~(abs_diff[2]) : ~(abs_diff[1]) - 1'h1};	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7, :340:21, :349:8, :352:19, :353:20, :356:31, :357:{10,36}, :376:21
      automatic logic [5:0] norm_man_temp = {3'h0, abs_diff} << lzc;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:311:18, :340:21, :357:10, :364:32
      result_reg_r <=
        {zero_result ? 2'h0 : (_GEN ? _a_exp_T : _b_exp_T) - lzc - 2'h2,
         zero_result ? 2'h0 : norm_man_temp[1:0]};	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:315:25, :316:25, :326:{17,25}, :329:26, :333:26, :343:30, :357:10, :364:32, :367:53, :373:37, :376:{21,67}, :377:25, :380:19, :383:33
      result_reg_r_1 <= result_reg_r;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:383:33
      result_reg <= result_reg_r_1;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:383:33
      valid_reg_r <= io_in_valid;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:384:32
      valid_reg_r_1 <= valid_reg_r;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:384:32
      valid_reg <= valid_reg_r_1;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:384:32
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
      `FIRRTL_BEFORE_INITIAL	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
      automatic logic [31:0] _RANDOM[0:0];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
      `ifdef INIT_RANDOM_PROLOG_	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
        `INIT_RANDOM_PROLOG_	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
        result_reg_r = _RANDOM[/*Zero width*/ 1'b0][3:0];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7, :383:33
        result_reg_r_1 = _RANDOM[/*Zero width*/ 1'b0][7:4];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7, :383:33
        result_reg = _RANDOM[/*Zero width*/ 1'b0][11:8];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7, :383:33
        valid_reg_r = _RANDOM[/*Zero width*/ 1'b0][12];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7, :383:33, :384:32
        valid_reg_r_1 = _RANDOM[/*Zero width*/ 1'b0][13];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7, :383:33, :384:32
        valid_reg = _RANDOM[/*Zero width*/ 1'b0][14];	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7, :383:33, :384:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
      `FIRRTL_AFTER_INITIAL	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out = result_reg;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7, :383:33
  assign io_out_valid = valid_reg;	// \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala:283:7, :384:32
endmodule

