$date
2025-07-28T22:40+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module FPAdder $end
 $var wire 2 ! baseA $end
 $var wire 1 " sr_valid_0 $end
 $var wire 4 # sr_b_0 $end
 $var wire 2 $ baseB $end
 $var wire 4 % io_in_a $end
 $var wire 4 & io_in_b $end
 $var wire 2 ' normExp $end
 $var wire 1 ( io_valid_in $end
 $var wire 2 ) expDiff $end
 $var wire 1 * reset $end
 $var wire 2 + commonExp $end
 $var wire 4 , sr_a_0 $end
 $var wire 3 - sum $end
 $var wire 1 . io_valid_out $end
 $var wire 1 / printf_8 $end
 $var wire 1 0 printf_7 $end
 $var wire 1 1 printf_6 $end
 $var wire 1 2 clock $end
 $var wire 2 3 alignedFracB $end
 $var wire 1 4 printf_1 $end
 $var wire 2 5 alignedFracA $end
 $var wire 1 6 printf_5 $end
 $var wire 1 7 printf_4 $end
 $var wire 1 8 printf_3 $end
 $var wire 1 9 printf_2 $end
 $var wire 1 : shiftAmount $end
 $var wire 4 ; io_out $end
 $var wire 1 < aBigger $end
 $var wire 1 = fracA $end
 $var wire 1 > fracB $end
 $var wire 1 ? printf $end
 $var wire 2 @ expB $end
 $var wire 2 A expA $end
 $var wire 1 B normFrac $end
$upscope $end
$enddefinitions $end
$dumpvars
00
01
02
04
06
07
08
09
0:
0<
b00 5
0=
0>
b00 3
0?
b00 )
0B
b00 '
b00 +
b00 !
b00 $
b0000 %
b0000 #
b0000 ,
b0000 &
b000 -
0"
0(
b00 A
b00 @
0*
b0000 ;
0.
0/
$end
#0
b10 !
b10 3
b10 $
b10 5
b01 '
1*
b0010 ;
1<
b100 -
#1
12
#6
02
1(
0*
#11
1"
12
1.
#16
02
b0001 &
#21
12
b0001 #
b11 3
b11 $
b101 -
1>
#26
02
0(
#31
0"
12
0.
#36
02
#41
12
#46
02
#51
12
#56
02
#61
12
#66
02
#71
12
#76
02
