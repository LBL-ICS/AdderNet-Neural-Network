$date
2025-07-28T22:00+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module FPAdder $end
 $var wire 1 ! sr_valid_2 $end
 $var wire 1 " sr_valid_1 $end
 $var wire 2 # baseA $end
 $var wire 1 $ sr_valid_0 $end
 $var wire 4 % sr_b_0 $end
 $var wire 2 & baseB $end
 $var wire 4 ' sr_b_1 $end
 $var wire 4 ( io_in_a $end
 $var wire 4 ) sr_b_2 $end
 $var wire 4 * io_in_b $end
 $var wire 2 + normExp $end
 $var wire 1 , io_valid_in $end
 $var wire 1 - io_valid_out $end
 $var wire 1 . clock $end
 $var wire 2 / alignedFracB $end
 $var wire 2 0 alignedFracA $end
 $var wire 1 1 shiftAmount $end
 $var wire 1 2 reset $end
 $var wire 4 3 io_out $end
 $var wire 1 4 aBigger $end
 $var wire 1 5 fracA $end
 $var wire 2 6 commonExp $end
 $var wire 4 7 sr_a_0 $end
 $var wire 4 8 sr_a_1 $end
 $var wire 4 9 sr_a_2 $end
 $var wire 1 : fracB $end
 $var wire 3 ; sum $end
 $var wire 2 < expB $end
 $var wire 2 = expA $end
 $var wire 1 > normFrac $end
$upscope $end
$enddefinitions $end
$dumpvars
01
02
b00 6
04
b00 =
05
b00 <
b00 0
0:
b00 /
0>
b00 &
b00 +
b000 ;
b00 #
b0000 %
b0000 *
b0000 (
b0000 )
b0000 '
0!
0"
b0000 3
0$
b0000 8
0,
b0000 9
0-
0.
b0000 7
$end
#0
b10 0
12
b10 #
b0010 3
14
b10 &
b01 +
b100 ;
b10 /
#1
1.
#6
02
1,
0.
#11
1$
1.
#16
b0001 (
b0001 *
0.
#21
1"
b0001 %
b0001 7
1.
#26
b0010 (
0.
#31
1!
b0001 '
b0010 7
b0001 8
1-
1.
#36
b0011 (
b0010 *
0.
#41
b11 #
b0010 %
b11 &
b0001 )
1.
b11 /
b11 0
b0011 3
15
b0011 7
b0010 8
b0001 9
1:
b110 ;
1>
#46
b0100 (
0.
#51
b10 #
b0010 '
1.
b01 /
b10 0
11
05
b01 6
b0100 7
b0011 8
b0010 9
b011 ;
b01 =
#56
b0101 (
b0011 *
0.
#61
b11 #
b0011 %
b10 &
b0010 )
b10 +
1.
b10 /
b11 0
01
b0100 3
15
b0101 7
b0100 8
b0011 9
0:
b101 ;
b01 <
0>
#66
b0110 (
0.
#71
b10 #
b0011 '
1.
b01 /
b10 0
11
b0101 3
05
b10 6
b0110 7
b0101 8
b0100 9
b011 ;
b10 =
1>
#76
b0111 (
b0100 *
0.
#81
b11 #
b0100 %
b11 &
b0011 )
b11 +
1.
b11 0
b0110 3
15
b0111 7
b0110 8
b0101 9
1:
b100 ;
0>
#86
b1000 (
0.
#91
b10 #
b0100 '
b00 +
1.
b11 /
b10 0
01
b0000 3
05
b11 6
b1000 7
b0111 8
b0110 9
b101 ;
b11 =
#96
b1001 (
b0101 *
0.
#101
b11 #
b0101 %
b10 &
b0100 )
1.
b01 /
b11 0
11
15
b1001 7
b1000 8
b0111 9
0:
b100 ;
b10 <
#106
b1010 (
0.
#111
b10 #
b0101 '
b11 +
1.
b10 /
b10 0
01
b0110 3
04
05
b10 6
b1010 7
b1001 8
b1000 9
b00 =
#116
b1011 (
b0110 *
0.
#121
b11 #
b0110 %
b11 &
b0101 )
1.
b11 /
b11 0
b0111 3
15
b1011 7
b1010 8
b1001 9
1:
b110 ;
1>
#126
b1100 (
0.
#131
b10 #
b0110 '
1.
b01 0
11
b0110 3
05
b1100 7
b1011 8
b1010 9
b100 ;
b01 =
0>
#136
b1101 (
b0111 *
0.
#141
b11 #
b0111 %
b10 &
b0110 )
b00 +
1.
b10 /
b11 0
01
b0000 3
15
b11 6
b1101 7
b1100 8
b1011 9
0:
b101 ;
b11 <
#146
b1110 (
0.
#151
b10 #
b0111 '
b11 +
1.
b01 0
11
b0111 3
05
b1110 7
b1101 8
b1100 9
b011 ;
b10 =
1>
#156
b0000 (
b0000 *
0,
0.
#161
b11 #
0$
b0000 %
b11 &
b0111 )
b00 +
1.
b11 /
b0000 3
15
b0000 7
b1110 8
b1101 9
1:
b100 ;
0>
#166
0.
#171
0"
b10 #
b0000 '
1.
b10 0
01
14
05
b0000 8
b1110 9
b101 ;
b11 =
#176
0.
#181
0!
b10 &
b0000 )
b01 +
0-
1.
b10 /
b0010 3
b00 6
b0000 9
0:
b100 ;
b00 <
b00 =
#186
0.
#191
1.
#196
0.
#201
1.
#206
0.
