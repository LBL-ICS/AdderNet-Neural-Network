$date
2025-08-12T21:06+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module FPAdder_4_1 $end
 $var wire 1 ! sr_valid_0 $end
 $var wire 4 " io_in_a $end
 $var wire 4 # io_in_b $end
 $var wire 3 $ den $end
 $var wire 1 % expAbool $end
 $var wire 1 & io_valid_in $end
 $var wire 3 ( normFracA $end
 $var wire 3 ) normFracB $end
 $var wire 4 * sr_data_0 $end
 $var wire 4 + expDiffs $end
 $var wire 4 , newExp $end
 $var wire 4 - expDiff $end
 $var wire 1 . reset $end
 $var wire 4 / alignedLarge $end
 $var wire 3 0 eB_eS $end
 $var wire 4 1 result $end
 $var wire 1 2 eB_wide_sign $end
 $var wire 4 3 kCap $end
 $var wire 1 4 carryOut $end
 $var wire 4 5 k $end
 $var wire 4 6 alignedSmall $end
 $var wire 1 8 expAGtB $end
 $var wire 4 9 shiftAmts $end
 $var wire 4 : eA $end
 $var wire 4 ; eB $end
 $var wire 4 < encE $end
 $var wire 4 = eA_wide $end
 $var wire 3 > shiftedFrac $end
 $var wire 1 ? io_valid_out $end
 $var wire 1 @ lzc $end
 $var wire 1 A expBbool $end
 $var wire 3 B eA_eS $end
 $var wire 2 C outFrac $end
 $var wire 1 D clock $end
 $var wire 4 F eB_wide $end
 $var wire 5 G fracSum $end
 $var wire 4 H io_out $end
 $var wire 2 I fracA $end
 $var wire 2 J fracB $end
 $var wire 4 L expOut $end
 $var wire 2 M expB $end
 $var wire 1 N eA_wide_sign $end
 $var wire 2 O expA $end
 $var wire 2 Q outExp $end
  $scope module lzc $end
   $var wire 3 ' rev $end
   $var wire 1 7 io_isZero $end
   $var wire 2 E io_out $end
   $var wire 1 K any $end
   $var wire 3 P io_in $end
  $upscope $end
$upscope $end
$enddefinitions $end
$dumpvars
02
04
07
08
0?
0@
0A
0D
0K
0N
b0000 "
b0000 #
b0000 ,
b0000 -
b0000 *
b0000 +
b0000 5
b0000 3
b00000 G
b0000 1
b0000 /
b0000 <
b0000 =
b0000 :
b0000 ;
b0000 9
b0000 6
b000 B
b0000 L
b000 P
b0000 H
b0000 F
b000 >
b000 '
b000 )
b000 (
b000 $
b00 Q
b00 O
b000 0
b00 I
0!
b00 M
0%
0&
b00 J
b00 E
0.
b00 C
$end
#0
1A
1%
b11 E
b1111 F
17
b0011 9
b0001 <
b1111 =
1.
#1
1D
#6
0D
1&
0.
#11
1!
1D
1?
#16
b0001 #
b01 C
b001 $
0D
b10 E
b100 '
b00001 G
b001 )
b01 J
1K
b1110 ,
b0001 /
b001 P
b0001 1
b0010 3
b0010 5
07
b0010 9
b1111 <
b100 >
#21
1D
b0001 H
b0001 *
#26
b0010 #
b10 C
b010 $
0D
b01 E
b010 '
b00010 G
b010 )
b10 J
b1111 ,
b0010 /
b010 P
b0010 1
b0001 3
b0001 5
b0001 9
b0000 <
#31
1D
b0010 H
b0010 *
#36
b0011 #
b11 C
b011 $
0D
b110 '
b00011 G
b011 )
b11 J
b0011 /
b011 P
b0011 1
b110 >
#41
1D
b0011 H
b0011 *
#46
0A
b0100 #
b00 C
b100 $
0D
b00 E
b0000 F
b001 '
b00100 G
b100 )
b00 J
b0000 ,
b01 M
b0100 /
b001 0
b100 P
b0100 1
b01 Q
b0000 3
b0000 5
b0000 9
b0001 <
b100 >
#51
1D
b0100 H
b0100 *
#56
b0101 #
b01 C
b101 $
0D
b101 '
b00101 G
b101 )
b01 J
b0101 /
b101 P
b0101 1
b101 >
#61
1D
b0101 H
b0101 *
#66
b0110 #
b10 C
b110 $
0D
b011 '
b00110 G
b110 )
b10 J
b0110 /
b110 P
b0110 1
b110 >
#71
1D
b0110 H
b0110 *
#76
b0111 #
b11 C
b111 $
0D
b111 '
b00111 G
b111 )
b11 J
b0111 /
b111 P
b0111 1
b111 >
#81
1D
b0111 H
b0111 *
#86
b00 C
0D
b0001 F
b00100 G
b00 J
b0001 L
b10 M
b100 P
b10 Q
b1000 #
b000 $
b001 '
b100 )
b1111 +
b0001 ,
b0001 -
b0100 /
b010 0
b1000 1
b0011 3
b1111 5
b0001 ;
b0010 <
b100 >
#91
1D
b1000 H
b1000 *
#96
b101 P
b1001 1
b1001 #
b01 C
0D
b101 '
b00101 G
b101 )
b01 J
b101 >
b0101 /
#101
1D
b1001 H
b1001 *
#106
1A
b00 C
0D
b11 E
b1111 F
b00000 G
b00 J
0K
b0000 L
b00 M
b000 P
b00 Q
b0000 #
0&
b000 '
b000 )
b0000 +
b0000 ,
b0000 -
b0000 /
b000 0
b0000 1
b0000 3
b0000 5
17
b0011 9
b0000 ;
b0001 <
b000 >
#111
0!
1D
0?
#116
0D
