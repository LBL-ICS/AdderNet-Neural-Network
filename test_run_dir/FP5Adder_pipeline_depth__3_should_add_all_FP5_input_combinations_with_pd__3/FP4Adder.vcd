$date
2025-07-17T21:53+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module FP4Adder $end
 $var wire 2 ! aligned_exp $end
 $var wire 1 " a_bigger $end
 $var wire 3 # shifted_man $end
 $var wire 1 $ io_out_valid $end
 $var wire 2 % adjusted_exp $end
 $var wire 4 & aligned_b $end
 $var wire 2 ' norm_man $end
 $var wire 4 ( aligned_a $end
 $var wire 2 ) man_1 $end
 $var wire 1 * clock $end
 $var wire 2 + exp_diff $end
 $var wire 1 , io_out_valid_r $end
 $var wire 5 - io_b $end
 $var wire 5 . io_a $end
 $var wire 1 / reset $end
 $var wire 2 0 a_exp $end
 $var wire 5 1 io_out $end
 $var wire 1 2 io_in_valid $end
 $var wire 4 3 sum_full $end
 $var wire 2 4 shift_amt $end
 $var wire 4 5 result $end
 $var wire 2 6 norm_exp $end
 $var wire 2 7 b_exp $end
 $var wire 1 8 io_out_valid_r_1 $end
 $var wire 2 9 man $end
 $var wire 3 : a_full $end
 $var wire 3 ; b_full $end
 $var wire 1 < io_in_en $end
 $var wire 4 = io_out_r $end
 $var wire 4 > io_out_r_1 $end
$upscope $end
$enddefinitions $end
$dumpvars
b00 9
02
b00 7
b00 6
b0000 >
08
b00 0
0<
b00 4
b00 )
b00 '
b00 +
b00 !
b00000 -
b000 ;
b00 %
b000 :
b00000 .
b00000 1
b000 #
b0000 (
b0000 &
b0000 5
0"
b0000 3
0$
b0000 =
0*
0,
0/
$end
#0
1"
b100 #
b1000 3
b0110 5
b0100 &
b01 6
b10 '
b0100 (
b100 :
b100 ;
1/
#1
1*
#6
12
0*
1<
0/
#11
1*
1,
b0110 =
#16
02
0*
0<
#21
1*
#26
0*
#31
1*
#36
12
b1001 3
b0101 &
b01 )
0*
b101 ;
1<
b00001 -
#41
b00110 1
1$
18
1*
b0110 >
#46
02
0*
0<
#51
1*
#56
0*
#61
1*
#66
0*
