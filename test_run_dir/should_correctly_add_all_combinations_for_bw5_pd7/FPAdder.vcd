$date
2025-07-25T23:54+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module FPAdder $end
 $var wire 2 ! aligned_exp $end
 $var wire 4 " sum_mant $end
 $var wire 3 # out_hi $end
 $var wire 5 $ io_in_a $end
 $var wire 5 % io_in_b $end
 $var wire 2 & exp_b $end
 $var wire 2 ' final_mant $end
 $var wire 2 ( man_b $end
 $var wire 2 ) man_a $end
 $var wire 3 * man_b_shifted $end
 $var wire 3 + norm_man_b $end
 $var wire 1 , io_valid_r_1 $end
 $var wire 1 - io_valid_r_2 $end
 $var wire 1 . io_valid_r_3 $end
 $var wire 3 / norm_man_a $end
 $var wire 1 0 clock $end
 $var wire 1 1 io_valid_r_4 $end
 $var wire 2 2 exp_diff $end
 $var wire 1 3 io_valid_r_5 $end
 $var wire 1 4 io_valid_r_6 $end
 $var wire 1 5 reset $end
 $var wire 1 6 carry $end
 $var wire 5 7 io_out $end
 $var wire 5 8 out $end
 $var wire 1 9 io_valid $end
 $var wire 2 : exp_out $end
 $var wire 2 ; final_exp $end
 $var wire 3 < man_a_shifted $end
 $var wire 1 = io_valid_r $end
 $var wire 5 > io_out_r $end
 $var wire 5 ? io_out_r_4 $end
 $var wire 2 @ exp_a $end
 $var wire 5 A io_out_r_3 $end
 $var wire 5 B io_out_r_6 $end
 $var wire 5 C io_out_r_5 $end
 $var wire 3 D sum_norm $end
 $var wire 5 E io_out_r_2 $end
 $var wire 5 F io_out_r_1 $end
$upscope $end
$enddefinitions $end
$dumpvars
00
01
03
04
05
06
b00 ;
b000 D
b00 :
09
0=
b00 2
b00 )
b00 (
b00000 %
b00 '
b00000 $
b00 &
b00 !
b000 <
b0000 "
b000 #
b00000 7
b00000 8
b000 /
b000 +
b00000 ?
b000 *
b00000 >
b00000 A
b00000 C
b00000 B
b00000 E
b00000 F
b00 @
0,
0-
0.
$end
#0
b1000 "
b001 #
b100 D
b100 *
b100 +
b100 /
15
16
b00100 8
19
b01 :
b01 ;
b100 <
#1
10
11
13
14
1,
1-
1=
1.
b00100 >
#6
00
05
#11
10
b00100 F
#16
00
