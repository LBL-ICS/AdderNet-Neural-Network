$date
2025-07-25T23:54+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module FPAdder $end
 $var wire 2 ! aligned_exp $end
 $var wire 3 " sum_mant $end
 $var wire 3 # out_hi $end
 $var wire 4 $ io_in_a $end
 $var wire 4 % io_in_b $end
 $var wire 2 & exp_b $end
 $var wire 1 ' final_mant $end
 $var wire 1 ( man_b $end
 $var wire 1 ) man_a $end
 $var wire 2 * man_b_shifted $end
 $var wire 2 + norm_man_b $end
 $var wire 1 , io_valid_r_1 $end
 $var wire 1 - io_valid_r_2 $end
 $var wire 2 . norm_man_a $end
 $var wire 1 / clock $end
 $var wire 2 0 exp_diff $end
 $var wire 1 1 reset $end
 $var wire 1 2 carry $end
 $var wire 4 3 io_out $end
 $var wire 4 4 out $end
 $var wire 1 5 io_valid $end
 $var wire 2 6 exp_out $end
 $var wire 2 7 final_exp $end
 $var wire 2 8 man_a_shifted $end
 $var wire 1 9 io_valid_r $end
 $var wire 4 : io_out_r $end
 $var wire 2 ; exp_a $end
 $var wire 2 < sum_norm $end
 $var wire 4 = io_out_r_2 $end
 $var wire 4 > io_out_r_1 $end
$upscope $end
$enddefinitions $end
$dumpvars
01
b00 8
02
b00 7
b00 6
05
b00 <
b0000 >
b00 ;
09
b00 0
b00 .
b00 &
b00 +
b00 *
b00 !
b0000 $
b0000 %
b000 #
b000 "
b0000 4
b0000 3
0'
0(
b0000 =
0)
b0000 :
0,
0-
0/
$end
#0
b100 "
b001 #
b10 *
b10 +
b10 .
11
12
b0010 4
15
b01 6
b01 7
b10 8
b10 <
#1
19
b0010 :
1,
1-
1/
#6
01
0/
#11
b0010 >
1/
#16
0/
