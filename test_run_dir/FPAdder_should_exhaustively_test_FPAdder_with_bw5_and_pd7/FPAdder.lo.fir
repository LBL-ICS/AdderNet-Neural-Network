FIRRTL version 1.2.0
circuit FPAdder :
  module FPAdder : @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 235:7]
    input clock : Clock @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 235:7]
    input reset : UInt<1> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 235:7]
    input io_in_a : UInt<5> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 242:14]
    input io_in_b : UInt<5> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 242:14]
    output io_out : UInt<5> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 242:14]
    input io_valid_in : UInt<1> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 242:14]
    output io_valid_out : UInt<1> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 242:14]

    reg inAReg : UInt<5>, clock with :
      reset => (UInt<1>("h0"), inAReg) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 251:36]
    reg inBReg : UInt<5>, clock with :
      reset => (UInt<1>("h0"), inBReg) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 252:36]
    reg validReg0 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), validReg0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 253:39]
    node expA = bits(inAReg, 4, 3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 255:20]
    node fracA = bits(inAReg, 2, 0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 256:21]
    node expB = bits(inBReg, 4, 3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 257:20]
    node fracB = bits(inBReg, 2, 0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 258:21]
    node _manA_T = eq(expA, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 260:23]
    node _manA_T_1 = cat(UInt<1>("h0"), fracA) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 260:35]
    node _manA_T_2 = cat(UInt<1>("h1"), fracA) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 260:57]
    node manA = mux(_manA_T, _manA_T_1, _manA_T_2) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 260:17]
    node _manB_T = eq(expB, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 261:23]
    node _manB_T_1 = cat(UInt<1>("h0"), fracB) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 261:35]
    node _manB_T_2 = cat(UInt<1>("h1"), fracB) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 261:57]
    node manB = mux(_manB_T, _manB_T_1, _manB_T_2) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 261:17]
    node _expDiff_T = asSInt(expA) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 263:22]
    node _expDiff_T_1 = asSInt(expB) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 263:36]
    node _expDiff_T_2 = sub(_expDiff_T, _expDiff_T_1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 263:29]
    node _expDiff_T_3 = tail(_expDiff_T_2, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 263:29]
    node expDiff = asSInt(_expDiff_T_3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 263:29]
    node _T = geq(expDiff, asSInt(UInt<1>("h0"))) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 268:16]
    node _alignedManB_T = asUInt(expDiff) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 270:36]
    node _alignedManB_T_1 = dshr(manB, _alignedManB_T) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 270:25]
    node _alignedManA_T = sub(asSInt(UInt<1>("h0")), expDiff) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 273:29]
    node _alignedManA_T_1 = tail(_alignedManA_T, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 273:29]
    node _alignedManA_T_2 = asSInt(_alignedManA_T_1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 273:29]
    node _alignedManA_T_3 = asUInt(_alignedManA_T_2) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 273:39]
    node _alignedManA_T_4 = dshr(manA, _alignedManA_T_3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 273:25]
    node _GEN_0 = mux(_T, manA, _alignedManA_T_4) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 268:24 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 269:17 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 273:17]
    node _GEN_1 = mux(_T, _alignedManB_T_1, manB) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 268:24 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 270:17 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 272:17]
    node alignedManA = pad(_GEN_0, 5) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 265:25]
    node alignedManB = pad(_GEN_1, 5) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 266:25]
    node sum = add(alignedManA, alignedManB) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 276:25]
    node _leadingOnePos_T = bits(sum, 0, 0) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _leadingOnePos_T_1 = bits(sum, 1, 1) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _leadingOnePos_T_2 = bits(sum, 2, 2) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _leadingOnePos_T_3 = bits(sum, 3, 3) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _leadingOnePos_T_4 = bits(sum, 4, 4) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _leadingOnePos_T_5 = bits(sum, 5, 5) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _leadingOnePos_T_6 = mux(_leadingOnePos_T_4, UInt<3>("h4"), UInt<3>("h5")) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _leadingOnePos_T_7 = mux(_leadingOnePos_T_3, UInt<2>("h3"), _leadingOnePos_T_6) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _leadingOnePos_T_8 = mux(_leadingOnePos_T_2, UInt<2>("h2"), _leadingOnePos_T_7) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _leadingOnePos_T_9 = mux(_leadingOnePos_T_1, UInt<1>("h1"), _leadingOnePos_T_8) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _leadingOnePos_T_10 = mux(_leadingOnePos_T, UInt<1>("h0"), _leadingOnePos_T_9) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _leadingOnePos_T_11 = sub(UInt<3>("h5"), _leadingOnePos_T_10) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 278:44]
    node leadingOnePos = tail(_leadingOnePos_T_11, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 278:44]
    node shiftedSum = dshr(sum, leadingOnePos) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 281:24]
    node normMan = bits(shiftedSum, 2, 0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 284:27]
    node _commonExp_T = geq(expDiff, asSInt(UInt<1>("h0"))) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 287:31]
    node commonExp = mux(_commonExp_T, expA, expB) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 287:22]
    node _normExp_T = geq(commonExp, leadingOnePos) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 288:31]
    node _normExp_T_1 = sub(commonExp, leadingOnePos) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 288:59]
    node _normExp_T_2 = tail(_normExp_T_1, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 288:59]
    node normExp = mux(_normExp_T, _normExp_T_2, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 288:20]
    node result = cat(normExp, normMan) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 289:19]
    reg outReg : UInt<6>, clock with :
      reset => (UInt<1>("h0"), outReg) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 292:35]
    reg validOutReg : UInt<1>, clock with :
      reset => (UInt<1>("h0"), validOutReg) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 293:40]
    node _T_1 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 299:9]
    io_out <= bits(outReg, 4, 0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 295:10]
    io_valid_out <= validOutReg @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 296:16]
    inAReg <= io_in_a @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 251:36]
    inBReg <= io_in_b @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 252:36]
    validReg0 <= io_valid_in @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 253:39]
    outReg <= result @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 292:35]
    validOutReg <= validReg0 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 293:40]
    printf(clock, and(and(UInt<1>("h1"), _T_1), UInt<1>("h1")), "[DEBUG] valid_in=%b in_a=%b in_b=%b sum=%b leadingOne=%d normExp=%d normMan=%b out=%b valid_out=%b\n", io_valid_in, inAReg, inBReg, sum, leadingOnePos, normExp, normMan, io_out, io_valid_out) : printf @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 299:9]
