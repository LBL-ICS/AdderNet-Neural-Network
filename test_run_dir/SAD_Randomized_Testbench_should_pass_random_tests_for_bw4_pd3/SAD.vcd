$date
2025-07-24T18:28+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module SAD $end
 $var wire 1 # io_valid_in $end
 $var wire 5 ( absDiffs_2 $end
 $var wire 5 ) absDiffs_1 $end
 $var wire 5 * absDiffs_0 $end
 $var wire 1 / reset $end
 $var wire 5 0 absDiffs_3 $end
 $var wire 4 1 io_a_3 $end
 $var wire 4 2 io_a_0 $end
 $var wire 4 4 io_a_2 $end
 $var wire 4 5 io_a_1 $end
 $var wire 1 9 adderTree $end
 $var wire 1 > validRegs_0 $end
 $var wire 1 ? validRegs_1 $end
 $var wire 1 @ validRegs_2 $end
 $var wire 4 C io_b_3 $end
 $var wire 4 D io_b_2 $end
 $var wire 4 E io_b_1 $end
 $var wire 4 F io_b_0 $end
 $var wire 1 G io_valid_out $end
 $var wire 1 J clock $end
 $var wire 9 O io_sum $end
 $var wire 1 R absvals_2 $end
 $var wire 1 S absvals_1 $end
 $var wire 1 T absvals_0 $end
 $var wire 1 U subtractors_3 $end
 $var wire 1 V absvals_3 $end
 $var wire 1 X subtractors_0 $end
 $var wire 1 Y subtractors_1 $end
 $var wire 1 Z subtractors_2 $end
  $scope module absvals_2 $end
   $var wire 5 K io_out $end
   $var wire 5 W io_in $end
  $upscope $end
  $scope module absvals_1 $end
   $var wire 5 ; io_out $end
   $var wire 5 N io_in $end
  $upscope $end
  $scope module subtractors_0 $end
   $var wire 5 , io_diff $end
   $var wire 4 A io_b $end
   $var wire 4 B io_a $end
  $upscope $end
  $scope module absvals_0 $end
   $var wire 5 ' io_in $end
   $var wire 5 L io_out $end
  $upscope $end
  $scope module subtractors_1 $end
   $var wire 4 ! io_b $end
   $var wire 4 " io_a $end
   $var wire 5 : io_diff $end
  $upscope $end
  $scope module adderTree $end
   $var wire 1 - clock $end
   $var wire 7 . io_out_pairs_0_1 $end
   $var wire 5 3 io_in_3 $end
   $var wire 5 6 io_in_0 $end
   $var wire 5 7 io_in_1 $end
   $var wire 5 8 io_in_2 $end
   $var wire 6 H io_out_pairs_0 $end
   $var wire 6 I io_out_pairs_1 $end
   $var wire 7 M io_out $end
  $upscope $end
  $scope module subtractors_2 $end
   $var wire 4 $ io_b $end
   $var wire 4 % io_a $end
   $var wire 5 P io_diff $end
  $upscope $end
  $scope module subtractors_3 $end
   $var wire 5 + io_diff $end
   $var wire 4 < io_a $end
   $var wire 4 = io_b $end
  $upscope $end
  $scope module absvals_3 $end
   $var wire 5 & io_in $end
   $var wire 5 Q io_out $end
  $upscope $end
$upscope $end
$enddefinitions $end
$dumpvars
09
0>
0?
0@
b00000 '
b00000 &
b00000 )
0G
b00000 (
b00000 +
b00000 *
0J
b00000 ,
b00000 0
b0000 $
b00000 3
b0000 %
b0000 "
0R
0S
0T
b00000 7
b0000 !
0U
b00000 6
0V
b00000 8
0X
b00000 ;
0Y
b00000 :
0Z
b0000 4
b0000 5
b0000 2
b000000 I
b000000 H
b0000 1
b0000 <
b00000 K
b0000 =
b00000 L
b00000 N
b00000 Q
b000000000 O
b00000 P
b0000 D
b0000 E
b0000 B
b0000000 M
b0000 C
b00000 W
b0000 A
b0000 F
b0000000 .
0#
0-
0/
$end
#0
1/
#1
1J
1-
#6
0J
0/
