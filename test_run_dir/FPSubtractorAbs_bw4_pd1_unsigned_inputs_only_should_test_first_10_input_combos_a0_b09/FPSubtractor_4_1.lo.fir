FIRRTL version 1.2.0
circuit FPSubtractor_4_1 :
  module LZC : @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 221:7]
    input clock : Clock @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 221:7]
    input reset : UInt<1> @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 221:7]
    input io_in : UInt<3> @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 222:14]
    output io_out : UInt<2> @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 222:14]

    node _io_out_T = bits(io_in, 0, 0) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 227:35]
    node _io_out_T_1 = bits(io_in, 1, 1) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 227:35]
    node _io_out_T_2 = bits(io_in, 2, 2) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 227:35]
    node _io_out_T_3 = mux(_io_out_T_1, UInt<1>("h1"), UInt<2>("h2")) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _io_out_T_4 = mux(_io_out_T_2, UInt<1>("h0"), _io_out_T_3) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    io_out <= _io_out_T_4 @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 227:10]

  module FPSubtractor_4_1 : @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 365:7]
    input clock : Clock @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 365:7]
    input reset : UInt<1> @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 365:7]
    input io_in_a : UInt<4> @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 368:14]
    input io_in_b : UInt<4> @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 368:14]
    input io_valid_in : UInt<1> @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 368:14]
    output io_out : UInt<4> @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 368:14]
    output io_valid_out : UInt<1> @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 368:14]

    inst lzc of LZC @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 416:19]
    node _T = geq(io_in_a, io_in_b) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 382:16]
    node _GEN_0 = mux(_T, io_in_a, io_in_b) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 382:28 383:10 386:10]
    node _GEN_1 = mux(_T, io_in_b, io_in_a) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 382:28 384:10 387:10]
    node aVal = _GEN_0 @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 380:18]
    node expA = bits(aVal, 2, 1) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 390:18]
    node manA = bits(aVal, 0, 0) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 391:18]
    node bVal = _GEN_1 @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 381:18]
    node expB = bits(bVal, 2, 1) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 392:18]
    node manB = bits(bVal, 0, 0) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 393:18]
    node _expDiff_T = geq(expA, expB) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 395:26]
    node _expDiff_T_1 = sub(expA, expB) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 395:40]
    node _expDiff_T_2 = tail(_expDiff_T_1, 1) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 395:40]
    node _expDiff_T_3 = sub(expB, expA) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 395:53]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 395:53]
    node expDiff = mux(_expDiff_T, _expDiff_T_2, _expDiff_T_4) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 395:20]
    node aExt_hi = cat(UInt<1>("h1"), manA) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 397:17]
    node aExt = cat(aExt_hi, UInt<1>("h0")) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 397:17]
    node bExt_hi = cat(UInt<1>("h1"), manB) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 398:17]
    node bExt = cat(bExt_hi, UInt<1>("h0")) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 398:17]
    node _T_1 = geq(expA, expB) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 404:13]
    node _alignedB_T = dshr(bExt, expDiff) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 406:22]
    node _alignedA_T = dshr(aExt, expDiff) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 409:22]
    node _GEN_2 = mux(_T_1, aExt, _alignedA_T) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 404:22 405:14 409:14]
    node _GEN_3 = mux(_T_1, _alignedB_T, bExt) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 404:22 406:14 410:14]
    node _GEN_4 = mux(_T_1, expA, expB) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 404:22 407:12 411:12]
    node alignedA = _GEN_2 @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 400:22]
    node alignedB = _GEN_3 @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 401:22]
    node _diff_T = sub(alignedA, alignedB) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 414:23]
    node diff = tail(_diff_T, 1) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 414:23]
    node normalizedMantFull = dshl(diff, lzc.io_out) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 420:33]
    node normalizedMant = bits(normalizedMantFull, 1, 1) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 421:42]
    node maxExp = _GEN_4 @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 402:20]
    node _adjustedExp_T = geq(maxExp, lzc.io_out) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 423:32]
    node _adjustedExp_T_1 = sub(maxExp, lzc.io_out) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 423:49]
    node _adjustedExp_T_2 = tail(_adjustedExp_T_1, 1) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 423:49]
    node adjustedExp = mux(_adjustedExp_T, _adjustedExp_T_2, UInt<1>("h0")) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 423:24]
    node result_hi = cat(UInt<1>("h0"), adjustedExp) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 424:19]
    node result = cat(result_hi, normalizedMant) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 424:19]
    reg sr_array_0 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), sr_array_0) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 426:25]
    reg valid_sr_0 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), valid_sr_0) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 427:25]
    node _sr_array_WIRE_0 = UInt<4>("h0") @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 426:{33,33}]
    node _valid_sr_WIRE_0 = UInt<1>("h0") @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 427:{33,33}]
    io_out <= sr_array_0 @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 436:10]
    io_valid_out <= valid_sr_0 @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 437:16]
    lzc.clock <= clock
    lzc.reset <= reset
    lzc.io_in <= diff @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 417:13]
    sr_array_0 <= mux(reset, _sr_array_WIRE_0, result) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 426:{25,25} 429:15]
    valid_sr_0 <= mux(reset, _valid_sr_WIRE_0, io_valid_in) @[C:\\Users\\josea\\IdeaProjects\\AdderNet-Neural-Network\\src\\main\\scala\\Fundamental_IC.scala 427:{25,25} 430:15]
