$date
2025-07-02T18:18+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module FP4Subtractor $end
 $var wire 2 ! aligned_exp $end
 $var wire 1 " shift_amount_leftCount_right $end
 $var wire 1 # shift_amount_leftCount_left $end
 $var wire 1 $ valid_reg $end
 $var wire 1 % io_out_valid $end
 $var wire 1 & shift_amount_rightCount $end
 $var wire 4 ' result_reg_r $end
 $var wire 1 ( shift_amount_leftCount_leftAllZeros $end
 $var wire 4 ) result_reg $end
 $var wire 6 * norm_man $end
 $var wire 3 + abs_diff $end
 $var wire 1 , clock $end
 $var wire 2 - exp_diff $end
 $var wire 3 . aligned_b_man $end
 $var wire 4 / io_b $end
 $var wire 4 0 io_a $end
 $var wire 1 1 reset $end
 $var wire 1 2 shift_amount_leftCount_rightCount $end
 $var wire 2 3 a_exp $end
 $var wire 4 4 io_out $end
 $var wire 1 5 io_in_valid $end
 $var wire 3 6 diff_sint $end
 $var wire 4 7 result $end
 $var wire 2 8 norm_exp $end
 $var wire 2 9 b_exp $end
 $var wire 4 : result_reg_r_1 $end
 $var wire 2 ; shift_amount_left $end
 $var wire 3 < aligned_a_man $end
 $var wire 1 = valid_reg_r_1 $end
 $var wire 1 > shift_amount_leftCount $end
 $var wire 3 ? b_man $end
 $var wire 1 @ io_in_en $end
 $var wire 1 A shift_amount_right $end
 $var wire 1 B shift_amount_leftCount_leftCount $end
 $var wire 2 C shift_amount $end
 $var wire 1 D valid_reg_r $end
 $var wire 1 E shift_amount_leftAllZeros $end
 $var wire 3 F a_man $end
$upscope $end
$enddefinitions $end
$dumpvars
b00 9
b000 F
01
b00 8
02
05
b00 ;
0=
0>
b00 3
0@
b000 6
0A
0B
0D
b00 -
0E
b000000 *
b000 ?
b00 !
b000 <
b000 .
b000 +
b0000 )
b0000 '
b0000 4
0"
0#
b0000 0
0$
0%
0&
b0000 /
0(
b0000 :
0,
b00 C
b0000 7
$end
#0
11
12
1B
b11 C
1E
1&
b100 F
1(
b100 <
b100 .
b100 ?
#1
1,
#6
1@
b01 !
1A
b10 C
0&
b101 F
b000100 *
b001 +
0,
b0100 /
b0101 0
01
b01 3
15
b001 6
b01 9
b101 <
#11
1D
1,
#16
0@
05
0,
#21
1,
#26
0,
#31
1,
#36
0,
