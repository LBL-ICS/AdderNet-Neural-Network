$date
2025-07-29T20:49+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module FPAdder $end
 $var wire 3 ! leadingOnePos $end
 $var wire 4 " io_in_a $end
 $var wire 4 # io_in_b $end
 $var wire 4 $ alignedManA $end
 $var wire 3 % normExp $end
 $var wire 1 & io_valid_in $end
 $var wire 1 ' io_valid_out $end
 $var wire 3 ( manA $end
 $var wire 4 ) alignedManB $end
 $var wire 3 * manB $end
 $var wire 2 + expDiff $end
 $var wire 1 , clock $end
 $var wire 2 - normMan $end
 $var wire 1 . reset $end
 $var wire 4 / io_out $end
 $var wire 2 0 fracA $end
 $var wire 2 1 commonExp $end
 $var wire 2 2 fracB $end
 $var wire 5 3 sum $end
 $var wire 4 4 inBReg $end
 $var wire 1 5 printf $end
 $var wire 5 6 result $end
 $var wire 4 7 inAReg $end
 $var wire 2 8 expB $end
 $var wire 1 9 validReg0 $end
 $var wire 2 : expA $end
 $var wire 5 ; shiftedSum $end
$upscope $end
$enddefinitions $end
$dumpvars
b00 8
05
b00 :
b00 1
09
b00 0
b00 2
b00 -
b00 +
b0000 $
b00000 3
b0000 "
b0000 #
b000 (
b00000 6
b000 %
b00000 ;
b0000 )
b000 *
b0000 4
0&
b0000 /
0'
b000 !
0,
0.
b0000 7
$end
#0
1.
#1
1,
#6
1&
0,
0.
#11
1'
19
1,
#16
b0001 #
0,
#21
b100 !
b01 2
b00001 3
b0001 4
b0001 )
b001 *
1,
#26
b0001 "
0,
#31
b01 0
b011 !
b00010 3
b0001 $
b0001 7
b001 (
1,
#36
b0010 "
b0011 #
0,
#41
b10 0
b100 !
b11 2
b00101 3
b0010 $
b0011 4
b0010 7
b010 (
b0011 )
b011 *
1,
#46
b0100 "
b0101 #
0,
#51
b0100 $
b100 (
b0101 )
b101 *
1,
b00 0
b01 1
b01 2
b01001 3
b0101 4
b0100 7
b01 8
b01 :
#56
b0110 "
b0111 #
0,
#61
b10 0
b11 2
b01101 3
b0110 $
b0111 4
b0110 7
b110 (
b0111 )
b111 *
1,
#66
b1000 "
b1001 #
0,
#71
b0100 $
b100 (
b0101 )
b101 *
1,
b00 0
b10 1
b01 2
b01001 3
b1001 4
b1000 7
b10 8
b10 :
#76
b1010 "
b1011 #
0,
#81
b10 0
b11 2
b01101 3
b0110 $
b1011 4
b1010 7
b110 (
b0111 )
b111 *
1,
#86
b1100 "
b1101 #
0,
#91
b0100 $
b100 (
b0101 )
b101 *
1,
b00 0
b11 1
b01 2
b01001 3
b1101 4
b1100 7
b11 8
b11 :
#96
b1110 "
b1111 #
0,
#101
b10 0
b11 2
b01101 3
b0110 $
b1111 4
b1110 7
b110 (
b0111 )
b111 *
1,
#106
0,
