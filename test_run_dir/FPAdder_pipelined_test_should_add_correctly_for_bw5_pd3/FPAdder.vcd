$date
2025-07-28T22:00+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module FPAdder $end
 $var wire 1 ! sr_valid_2 $end
 $var wire 1 " sr_valid_1 $end
 $var wire 3 # baseA $end
 $var wire 1 $ sr_valid_0 $end
 $var wire 5 % sr_b_0 $end
 $var wire 3 & baseB $end
 $var wire 5 ' sr_b_1 $end
 $var wire 5 ( io_in_a $end
 $var wire 5 ) sr_b_2 $end
 $var wire 5 * io_in_b $end
 $var wire 2 + normExp $end
 $var wire 1 , io_valid_in $end
 $var wire 1 - io_valid_out $end
 $var wire 1 . clock $end
 $var wire 3 / alignedFracB $end
 $var wire 3 0 alignedFracA $end
 $var wire 2 1 shiftAmount $end
 $var wire 1 2 reset $end
 $var wire 5 3 io_out $end
 $var wire 1 4 aBigger $end
 $var wire 2 5 fracA $end
 $var wire 2 6 commonExp $end
 $var wire 5 7 sr_a_0 $end
 $var wire 5 8 sr_a_1 $end
 $var wire 5 9 sr_a_2 $end
 $var wire 2 : fracB $end
 $var wire 4 ; sum $end
 $var wire 2 < expB $end
 $var wire 2 = expA $end
 $var wire 2 > normFrac $end
$upscope $end
$enddefinitions $end
$dumpvars
02
b00 6
04
b00 =
b00 <
b00 :
b00 1
b00 5
b00000 %
b00000 '
b00000 )
b00 +
b00000 (
b00000 *
b00000 3
b000 &
b000 #
b00000 7
b00000 9
b00000 8
b000 /
b000 0
0!
0"
0$
b0000 ;
b00 >
0,
0-
0.
$end
#0
b100 0
12
b100 #
b00100 3
14
b100 &
b01 +
b1000 ;
b100 /
#1
1.
#6
02
1,
0.
#11
1$
1.
#16
b00001 (
b00001 *
0.
#21
1"
b00001 %
b00001 7
1.
#26
b00010 (
0.
#31
1!
b00001 '
b00010 7
b00001 8
1-
1.
#36
b00011 (
b00010 *
0.
#41
b101 #
b00010 %
b101 &
b00001 )
1.
b101 /
b101 0
b00101 3
b01 5
b00011 7
b00010 8
b00001 9
b01 :
b1010 ;
b01 >
#46
b00100 (
0.
#51
b110 0
b110 #
b10 5
b00010 '
b00100 7
b00011 8
b00010 9
b1011 ;
1.
#56
b00101 (
b00011 *
0.
#61
b111 #
b00011 %
b110 &
b00010 )
1.
b110 /
b111 0
b00110 3
b11 5
b00101 7
b00100 8
b00011 9
b10 :
b1101 ;
b10 >
#66
b00110 (
0.
#71
b100 #
b00011 '
1.
b011 /
b100 0
b01 1
b00111 3
b00 5
b01 6
b00110 7
b00101 8
b00100 9
b0111 ;
b01 =
b11 >
#76
b00111 (
b00100 *
0.
#81
b101 #
b00100 %
b111 &
b00011 )
b10 +
1.
b101 0
b01000 3
b01 5
b00111 7
b00110 8
b00101 9
b11 :
b1000 ;
b00 >
#86
b01000 (
0.
#91
b110 0
b110 #
b10 5
b00100 '
b01000 7
b00111 8
b00110 9
b1001 ;
1.
#96
b01001 (
b00101 *
0.
#101
b111 #
b00101 %
b100 &
b00100 )
1.
b100 /
b111 0
b00 1
b01001 3
b11 5
b01001 7
b01000 8
b00111 9
b00 :
b1011 ;
b01 <
b01 >
#106
b01010 (
0.
#111
b100 #
b00101 '
1.
b010 /
b100 0
b01 1
b01010 3
b00 5
b10 6
b01010 7
b01001 8
b01000 9
b0110 ;
b10 =
b10 >
#116
b01011 (
b00110 *
0.
#121
b101 #
b00110 %
b101 &
b00101 )
1.
b101 0
b01011 3
b01 5
b01011 7
b01010 8
b01001 9
b01 :
b0111 ;
b11 >
#126
b01100 (
0.
#131
b110 #
b00110 '
b11 +
1.
b110 0
b01100 3
b10 5
b01100 7
b01011 8
b01010 9
b1000 ;
b00 >
#136
b01101 (
b00111 *
0.
#141
b111 #
b00111 %
b110 &
b00110 )
1.
b011 /
b111 0
b01101 3
b11 5
b01101 7
b01100 8
b01011 9
b10 :
b1010 ;
b01 >
#146
b01110 (
0.
#151
b100 #
b00111 '
1.
b001 /
b100 0
b10 1
b00 5
b11 6
b01110 7
b01101 8
b01100 9
b0101 ;
b11 =
#156
b01111 (
b01000 *
0.
#161
b101 #
b01000 %
b111 &
b00111 )
1.
b101 0
b01110 3
b01 5
b01111 7
b01110 8
b01101 9
b11 :
b0110 ;
b10 >
#166
b10000 (
0.
#171
b110 0
b110 #
b01111 3
b10 5
b01000 '
b10000 7
b01111 8
b01110 9
b0111 ;
1.
b11 >
#176
b10001 (
b01001 *
0.
#181
b111 #
b01001 %
b100 &
b01000 )
b00 +
1.
b010 /
b111 0
b01 1
b00000 3
b11 5
b10001 7
b10000 8
b01111 9
b00 :
b1001 ;
b10 <
b00 >
#186
b10010 (
0.
#191
b100 #
b01001 '
b10 +
1.
b100 /
b001 0
b10 1
b01001 3
04
b00 5
b10 6
b10010 7
b10001 8
b10000 9
b0101 ;
b00 =
b01 >
#196
b10011 (
b01010 *
0.
#201
b101 #
b01010 %
b101 &
b01001 )
1.
b101 /
b01010 3
b01 5
b10011 7
b10010 8
b10001 9
b01 :
b0110 ;
b10 >
#206
b10100 (
0.
#211
b110 #
b10 5
b01010 '
b10100 7
b10011 8
b10010 9
1.
#216
b10101 (
b01011 *
0.
#221
b111 #
b01011 %
b110 &
b01010 )
1.
b110 /
b01011 3
b11 5
b10101 7
b10100 8
b10011 9
b10 :
b0111 ;
b11 >
#226
b10110 (
0.
#231
b100 #
b01011 '
b11 +
1.
b010 0
b01 1
b01100 3
b00 5
b10110 7
b10101 8
b10100 9
b1000 ;
b01 =
b00 >
#236
b10111 (
b01100 *
0.
#241
b101 #
b01100 %
b111 &
b01011 )
1.
b111 /
b01 5
b10111 7
b10110 8
b10101 9
b11 :
b1001 ;
#246
b11000 (
0.
#251
b011 0
b110 #
b01101 3
b10 5
b01100 '
b11000 7
b10111 8
b10110 9
b1010 ;
1.
b01 >
#256
b11001 (
b01101 *
0.
#261
b111 #
b01101 %
b100 &
b01100 )
1.
b100 /
b001 0
b10 1
b11 5
b11 6
b11001 7
b11000 8
b10111 9
b00 :
b0101 ;
b11 <
#266
b11010 (
0.
#271
b100 #
b01101 '
1.
b010 0
b01 1
b01110 3
b00 5
b11010 7
b11001 8
b11000 9
b0110 ;
b10 =
b10 >
#276
b11011 (
b01110 *
0.
#281
b101 #
b01110 %
b101 &
b01101 )
1.
b101 /
b01111 3
b01 5
b11011 7
b11010 8
b11001 9
b01 :
b0111 ;
b11 >
#286
b11100 (
0.
#291
b110 #
b01110 '
b00 +
1.
b011 0
b00000 3
b10 5
b11100 7
b11011 8
b11010 9
b1000 ;
b00 >
#296
b11101 (
b01111 *
0.
#301
b111 #
b01111 %
b110 &
b01110 )
1.
b110 /
b11 5
b11101 7
b11100 8
b11011 9
b10 :
b1001 ;
#306
b11110 (
0.
#311
b100 #
b01111 '
1.
b100 0
b00 1
b00001 3
14
b00 5
b11110 7
b11101 8
b11100 9
b1010 ;
b11 =
b01 >
#316
b00000 (
b00000 *
0,
0.
#321
b101 #
0$
b00000 %
b111 &
b01111 )
1.
b111 /
b101 0
b00010 3
b01 5
b00000 7
b11110 8
b11101 9
b11 :
b1100 ;
b10 >
#326
0.
#331
b110 0
0"
b110 #
b10 5
b00000 '
b00000 8
b11110 9
b1101 ;
1.
#336
0.
#341
0!
b100 #
b100 &
b00000 )
b01 +
0-
1.
b100 /
b100 0
b00100 3
b00 5
b00 6
b00000 9
b00 :
b1000 ;
b00 <
b00 =
b00 >
#346
0.
#351
1.
#356
0.
#361
1.
#366
0.
