$date
2025-07-17T21:53+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module FP4Adder $end
 $var wire 2 ! aligned_exp $end
 $var wire 1 " a_bigger $end
 $var wire 4 # shifted_man $end
 $var wire 1 $ io_out_valid $end
 $var wire 3 % adjusted_exp $end
 $var wire 5 & aligned_b $end
 $var wire 3 ' norm_man $end
 $var wire 5 ( aligned_a $end
 $var wire 3 ) man_1 $end
 $var wire 1 * clock $end
 $var wire 2 + exp_diff $end
 $var wire 1 , io_out_valid_r $end
 $var wire 6 - io_b $end
 $var wire 6 . io_a $end
 $var wire 1 / reset $end
 $var wire 2 0 a_exp $end
 $var wire 6 1 io_out $end
 $var wire 1 2 io_in_valid $end
 $var wire 5 3 sum_full $end
 $var wire 3 4 shift_amt $end
 $var wire 5 5 result $end
 $var wire 2 6 norm_exp $end
 $var wire 2 7 b_exp $end
 $var wire 1 8 io_out_valid_r_1 $end
 $var wire 3 9 man $end
 $var wire 4 : a_full $end
 $var wire 4 ; b_full $end
 $var wire 1 < io_in_en $end
 $var wire 5 = io_out_r $end
 $var wire 5 > io_out_r_1 $end
$upscope $end
$enddefinitions $end
$dumpvars
02
b00 7
b00 6
08
b00 0
b000000 .
b000000 1
0<
b000 9
b00000 &
b00 +
b000000 -
b000 4
b00000 (
b00 !
b000 '
b00000 3
b000 )
b00000 5
b0000 #
b000 %
b00000 =
b00000 >
0"
0$
b0000 :
0*
b0000 ;
0,
0/
$end
#0
1"
b1000 #
b10000 3
b01100 5
b01000 &
b01 6
b100 '
b01000 (
b1000 :
b1000 ;
1/
#1
1*
#6
12
0*
1<
0/
#11
1*
1,
b01100 =
#16
02
0*
0<
#21
1*
#26
0*
#31
1*
#36
12
b10001 3
b01001 &
b001 )
0*
b1001 ;
1<
b000001 -
#41
b001100 1
1$
18
1*
b01100 >
#46
02
0*
0<
#51
1*
#56
0*
#61
1*
#66
0*
