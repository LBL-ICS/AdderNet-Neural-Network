FIRRTL version 1.2.0
circuit FPAdder_5_1 :
  module LZC : @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 230:7]
    input clock : Clock @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 230:7]
    input reset : UInt<1> @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 230:7]
    input io_in : UInt<4> @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 231:14]
    output io_out : UInt<3> @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 231:14]
    output io_isZero : UInt<1> @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 231:14]

    node _rev_T = bits(io_in, 1, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 236:22]
    node _rev_T_1 = bits(_rev_T, 0, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 236:22]
    node _rev_T_2 = bits(_rev_T, 1, 1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 236:22]
    node _rev_T_3 = cat(_rev_T_1, _rev_T_2) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 236:22]
    node _rev_T_4 = bits(io_in, 3, 2) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 236:22]
    node _rev_T_5 = bits(_rev_T_4, 0, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 236:22]
    node _rev_T_6 = bits(_rev_T_4, 1, 1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 236:22]
    node _rev_T_7 = cat(_rev_T_5, _rev_T_6) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 236:22]
    node rev = cat(_rev_T_3, _rev_T_7) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 236:22]
    node any = orr(rev) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 237:19]
    node _io_isZero_T = eq(any, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 238:16]
    node _io_out_T = bits(rev, 0, 0) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _io_out_T_1 = bits(rev, 1, 1) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _io_out_T_2 = bits(rev, 2, 2) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _io_out_T_3 = bits(rev, 3, 3) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _io_out_T_4 = mux(_io_out_T_2, UInt<2>("h2"), UInt<2>("h3")) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _io_out_T_5 = mux(_io_out_T_1, UInt<1>("h1"), _io_out_T_4) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _io_out_T_6 = mux(_io_out_T, UInt<1>("h0"), _io_out_T_5) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _io_out_T_7 = mux(any, _io_out_T_6, UInt<3>("h4")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 239:19]
    io_out <= _io_out_T_7 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 239:13]
    io_isZero <= _io_isZero_T @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 238:13]

  module FPAdder_5_1 : @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 242:7]
    input clock : Clock @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 242:7]
    input reset : UInt<1> @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 242:7]
    input io_in_a : UInt<5> @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 244:14]
    input io_in_b : UInt<5> @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 244:14]
    input io_valid_in : UInt<1> @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 244:14]
    output io_out : UInt<5> @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 244:14]
    output io_valid_out : UInt<1> @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 244:14]

    inst lzc of LZC @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 310:19]
    node expA = bits(io_in_a, 4, 3) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 260:21]
    node fracA = bits(io_in_a, 2, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 261:22]
    node expB = bits(io_in_b, 4, 3) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 264:21]
    node fracB = bits(io_in_b, 2, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 265:22]
    node expAbool = eq(expA, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 267:23]
    node expBbool = eq(expB, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 268:23]
    node _normFracA_T = cat(UInt<1>("h0"), fracA) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 274:33]
    node _normFracA_T_1 = cat(UInt<1>("h1"), fracA) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 274:55]
    node _normFracA_T_2 = mux(expAbool, _normFracA_T, _normFracA_T_1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 274:19]
    node _normFracB_T = cat(UInt<1>("h0"), fracB) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 275:33]
    node _normFracB_T_1 = cat(UInt<1>("h1"), fracB) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 275:55]
    node _normFracB_T_2 = mux(expBbool, _normFracB_T, _normFracB_T_1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 275:19]
    node _eA_T = eq(expA, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:37]
    node _eA_T_1 = asSInt(expA) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:54]
    node _eA_T_2 = sub(_eA_T_1, asSInt(UInt<2>("h1"))) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:61]
    node _eA_T_3 = tail(_eA_T_2, 1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:61]
    node _eA_T_4 = asSInt(_eA_T_3) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:61]
    node eA = mux(_eA_T, asSInt(UInt<1>("h0")), _eA_T_4) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:34]
    node _eB_T = eq(expB, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:37]
    node _eB_T_1 = asSInt(expB) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:54]
    node _eB_T_2 = sub(_eB_T_1, asSInt(UInt<2>("h1"))) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:61]
    node _eB_T_3 = tail(_eB_T_2, 1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:61]
    node _eB_T_4 = asSInt(_eB_T_3) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:61]
    node eB = mux(_eB_T, asSInt(UInt<1>("h0")), _eB_T_4) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 279:34]
    node _expDiffs_T = sub(eA, eB) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 284:21]
    node _expDiffs_T_1 = tail(_expDiffs_T, 1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 284:21]
    node expDiffs = asSInt(_expDiffs_T_1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 284:21]
    node expAGtB = gt(eA, eB) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 285:20]
    node _expDiff_T = lt(expDiffs, asSInt(UInt<1>("h0"))) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 286:30]
    node _expDiff_T_1 = sub(asSInt(UInt<1>("h0")), expDiffs) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 286:38]
    node _expDiff_T_2 = tail(_expDiff_T_1, 1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 286:38]
    node _expDiff_T_3 = asSInt(_expDiff_T_2) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 286:38]
    node _expDiff_T_4 = asUInt(_expDiff_T_3) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 286:49]
    node _expDiff_T_5 = asUInt(expDiffs) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 286:66]
    node expDiff = mux(_expDiff_T, _expDiff_T_4, _expDiff_T_5) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 286:20]
    node normFracA = _normFracA_T_2 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 271:23 274:13]
    node _alignedLarge_T = pad(normFracA, 5) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 293:34]
    node normFracB = _normFracB_T_2 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 272:23 275:13]
    node _alignedSmall_T = pad(normFracB, 5) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 294:34]
    node _alignedSmall_T_1 = gt(expDiff, UInt<3>("h5")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 294:60]
    node _alignedSmall_T_2 = mux(_alignedSmall_T_1, UInt<3>("h5"), expDiff) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 294:51]
    node _alignedSmall_T_3 = dshr(_alignedSmall_T, _alignedSmall_T_2) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 294:45]
    node _alignedLarge_T_1 = pad(normFracB, 5) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 300:34]
    node _alignedSmall_T_4 = pad(normFracA, 5) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 301:34]
    node _alignedSmall_T_5 = gt(expDiff, UInt<3>("h5")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 301:60]
    node _alignedSmall_T_6 = mux(_alignedSmall_T_5, UInt<3>("h5"), expDiff) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 301:51]
    node _alignedSmall_T_7 = dshr(_alignedSmall_T_4, _alignedSmall_T_6) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 301:45]
    node _GEN_0 = mux(expAGtB, _alignedLarge_T, _alignedLarge_T_1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 292:17 293:18 300:18]
    node _GEN_1 = mux(expAGtB, _alignedSmall_T_3, _alignedSmall_T_7) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 292:17 294:18 301:18]
    node _GEN_2 = mux(expAGtB, eA, eB) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 292:17 295:12 302:12]
    node alignedLarge = _GEN_0 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 288:26]
    node alignedSmall = _GEN_1 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 289:26]
    node fracSum = add(alignedLarge, alignedSmall) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 306:30]
    node carryOut = bits(fracSum, 4, 4) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 307:25]
    node _lzc_io_in_T = bits(fracSum, 3, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 311:23]
    node _shiftAmts_T = cat(UInt<1>("h0"), lzc.io_out) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 332:28]
    node shiftAmts = asSInt(_shiftAmts_T) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 332:49]
    node _shiftedFrac_T = bits(fracSum, 4, 1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 336:27]
    node expOut = pad(_GEN_2, 3) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 290:20]
    node _newExp_T = add(expOut, asSInt(UInt<2>("h1"))) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 337:22]
    node _newExp_T_1 = tail(_newExp_T, 1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 337:22]
    node _newExp_T_2 = asSInt(_newExp_T_1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 337:22]
    node _shiftedFrac_T_1 = bits(fracSum, 3, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 343:30]
    node _shiftedFrac_T_2 = dshl(_shiftedFrac_T_1, lzc.io_out) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 343:48]
    node _shiftedFrac_T_3 = bits(_shiftedFrac_T_2, 3, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 343:60]
    node _newExp_T_3 = sub(expOut, shiftAmts) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 344:24]
    node _newExp_T_4 = tail(_newExp_T_3, 1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 344:24]
    node _newExp_T_5 = asSInt(_newExp_T_4) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 344:24]
    node _GEN_3 = mux(lzc.io_isZero, UInt<1>("h0"), _shiftedFrac_T_3) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 339:18 340:19 343:19]
    node _GEN_4 = mux(lzc.io_isZero, asSInt(UInt<1>("h0")), _newExp_T_5) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 339:18 341:14 344:14]
    node _GEN_5 = mux(carryOut, _shiftedFrac_T, _GEN_3) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 334:18 336:17]
    node _GEN_6 = mux(carryOut, _newExp_T_2, _GEN_4) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 334:18 337:12]
    node shiftedFrac = _GEN_5 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 315:25]
    node _T = eq(shiftedFrac, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 355:20]
    node newExp = asSInt(bits(_GEN_6, 2, 0)) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 316:20]
    node _T_1 = lt(newExp, asSInt(UInt<1>("h0"))) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 359:17]
    node _k_T = sub(asSInt(UInt<1>("h0")), newExp) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 361:19]
    node _k_T_1 = tail(_k_T, 1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 361:19]
    node _k_T_2 = asSInt(_k_T_1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 361:19]
    node k = asUInt(_k_T_2) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 361:28]
    node _kCap_T = gt(k, UInt<3>("h5")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 362:24]
    node kCap = mux(_kCap_T, UInt<3>("h5"), k) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 362:21]
    node _den_T = dshr(shiftedFrac, kCap) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 363:31]
    node den = bits(_den_T, 3, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 363:39]
    node _outFrac_T = bits(den, 2, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 365:21]
    node _eClamp_T = gt(newExp, asSInt(UInt<3>("h2"))) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 367:31]
    node eClamp = mux(_eClamp_T, asSInt(UInt<3>("h2")), newExp) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 367:23]
    node _encE_T = add(eClamp, asSInt(UInt<2>("h1"))) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 368:28]
    node _encE_T_1 = tail(_encE_T, 1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 368:28]
    node _encE_T_2 = asSInt(_encE_T_1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 368:28]
    node encE = asUInt(_encE_T_2) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 368:38]
    node _outExp_T = bits(encE, 1, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 369:22]
    node _outFrac_T_1 = bits(shiftedFrac, 2, 0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 370:29]
    node _GEN_7 = mux(_T_1, UInt<1>("h0"), _outExp_T) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 359:24 364:15 369:15]
    node _GEN_8 = mux(_T_1, _outFrac_T, _outFrac_T_1) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 359:24 365:15 370:15]
    node _GEN_9 = mux(_T, UInt<1>("h0"), _GEN_7) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 355:29 356:13]
    node _GEN_10 = mux(_T, UInt<1>("h0"), _GEN_8) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 355:29 357:13]
    node outExp = _GEN_9 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 350:21]
    node outFrac = _GEN_10 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 351:21]
    node result = cat(outExp, outFrac) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 375:19]
    reg sr_valid_0 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sr_valid_0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 378:25]
    reg sr_data_0 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), sr_data_0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 379:20]
    node _GEN_11 = mux(io_valid_in, result, sr_data_0) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 385:21 386:16 379:20]
    node _T_2 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 398:11]
    node _T_3 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 402:11]
    node _T_4 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 403:11]
    node _T_5 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 404:11]
    node _T_6 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 406:11]
    node _T_7 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 407:11]
    node _T_8 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 408:11]
    node _T_9 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 409:11]
    node _T_10 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 410:11]
    node _T_11 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 412:11]
    node _T_12 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 413:11]
    node _T_13 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 415:11]
    node _T_14 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 417:13]
    node _T_15 = bits(fracSum, 4, 4) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 418:23]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 418:39]
    node _T_17 = bits(fracSum, 3, 3) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 418:57]
    node _T_18 = eq(_T_17, UInt<1>("h1")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 418:69]
    node _T_19 = and(_T_16, _T_18) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 418:47]
    node _T_20 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 419:13]
    node _T_21 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 421:13]
    node _T_22 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 425:11]
    node _T_23 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 426:11]
    node _T_24 = eq(reset, UInt<1>("h0")) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 428:11]
    node _sr_valid_WIRE_0 = UInt<1>("h0") @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 378:{33,33}]
    io_out <= sr_data_0 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 394:10]
    io_valid_out <= sr_valid_0 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 393:16]
    lzc.clock <= clock
    lzc.reset <= reset
    lzc.io_in <= _lzc_io_in_T @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 311:13]
    sr_valid_0 <= mux(reset, _sr_valid_WIRE_0, io_valid_in) @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 378:{25,25} 382:15]
    sr_data_0 <= _GEN_11
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_2), UInt<1>("h1")), "[STEP 1: Extract Fields]\n") : printf @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 398:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_3), UInt<1>("h1")), "[STEP 2: Compare Exponents]\n") : printf_1 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 402:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_4), UInt<1>("h1")), "  expA: %d, expB: %d\n", expA, expB) : printf_2 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 403:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_5), UInt<1>("h1")), "  expDiff: %d => expAGtB: %b\n", expDiff, expAGtB) : printf_3 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 404:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_6), UInt<1>("h1")), "[STEP 3: Align Mantissas]\n") : printf_4 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 406:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_7), UInt<1>("h1")), "  normFracA (with hidden 1): %b\n", normFracA) : printf_5 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 407:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_8), UInt<1>("h1")), "  normFracB (with hidden 1): %b\n", normFracB) : printf_6 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 408:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_9), UInt<1>("h1")), "  alignedLarge: %b | alignedSmall: %b\n", alignedLarge, alignedSmall) : printf_7 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 409:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_10), UInt<1>("h1")), "  selectedExpOut: %d\n", expOut) : printf_8 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 410:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_11), UInt<1>("h1")), "[STEP 4: Add Aligned Mantissas]\n") : printf_9 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 412:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_12), UInt<1>("h1")), "  sum: %b (carryOut = %b)\n", fracSum, carryOut) : printf_10 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 413:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_13), UInt<1>("h1")), "[STEP 5: Normalize Result]\n") : printf_11 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 415:11]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_valid_in), carryOut), _T_14), UInt<1>("h1")), "  CarryOut = 1 => shift right by 1\n") : printf_12 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 417:13]
    printf(clock, and(and(and(and(and(UInt<1>("h1"), io_valid_in), eq(carryOut, UInt<1>("h0"))), _T_19), _T_20), UInt<1>("h1")), "  Already normalized => no shift needed\n") : printf_13 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 419:13]
    printf(clock, and(and(and(and(and(UInt<1>("h1"), io_valid_in), eq(carryOut, UInt<1>("h0"))), eq(_T_19, UInt<1>("h0"))), _T_21), UInt<1>("h1")), "  No CarryOut => LZC = %d | shift left\n", lzc.io_out) : printf_14 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 421:13]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_22), UInt<1>("h1")), "[STEP 6: Final Result Reassembly]\n") : printf_15 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 425:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_23), UInt<1>("h1")), "  Final result = %b\n", result) : printf_16 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 426:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_24), UInt<1>("h1")), "[Cycle Info] bw = %d | pd = %d => valid_out: %b | output: %b\n", UInt<3>("h5"), UInt<1>("h1"), io_valid_out, io_out) : printf_17 @[Volumes/MacExternal/DevProjects/ScoolProjects/AdderNet-Neural-Network/src/main/scala/Fundamental_IC.scala 428:11]
