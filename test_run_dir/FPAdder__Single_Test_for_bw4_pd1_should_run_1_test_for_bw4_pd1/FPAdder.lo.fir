FIRRTL version 1.2.0
circuit FPAdder :
  module LZC : @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 221:7]
    input clock : Clock @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 221:7]
    input reset : UInt<1> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 221:7]
    input io_in : UInt<3> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 222:14]
    output io_out : UInt<2> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 222:14]

    node _io_out_T = bits(io_in, 0, 0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 227:35]
    node _io_out_T_1 = bits(io_in, 1, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 227:35]
    node _io_out_T_2 = bits(io_in, 2, 2) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 227:35]
    node _io_out_T_3 = mux(_io_out_T_1, UInt<1>("h1"), UInt<2>("h2")) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _io_out_T_4 = mux(_io_out_T_2, UInt<1>("h0"), _io_out_T_3) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    io_out <= _io_out_T_4 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 227:10]

  module FPAdder : @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 230:7]
    input clock : Clock @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 230:7]
    input reset : UInt<1> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 230:7]
    input io_in_a : UInt<4> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 231:14]
    input io_in_b : UInt<4> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 231:14]
    input io_valid_in : UInt<1> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 231:14]
    output io_out : UInt<4> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 231:14]
    output io_valid_out : UInt<1> @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 231:14]

    inst lzc of LZC @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 279:19]
    node signA = bits(io_in_a, 3, 3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 243:22]
    node expA = bits(io_in_a, 2, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 244:21]
    node fracA = bits(io_in_a, 0, 0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 245:22]
    node signB = bits(io_in_b, 3, 3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 247:22]
    node expB = bits(io_in_b, 2, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 248:21]
    node fracB = bits(io_in_b, 0, 0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 249:22]
    node normFracA = cat(UInt<1>("h1"), fracA) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 252:22]
    node normFracB = cat(UInt<1>("h1"), fracB) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 253:22]
    node expAGtB = gt(expA, expB) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 257:22]
    node _expDiff_T = sub(expA, expB) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 258:32]
    node _expDiff_T_1 = tail(_expDiff_T, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 258:32]
    node _expDiff_T_2 = sub(expB, expA) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 258:45]
    node _expDiff_T_3 = tail(_expDiff_T_2, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 258:45]
    node _expDiff_T_4 = mux(expAGtB, _expDiff_T_1, _expDiff_T_3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 258:17]
    node expDiff = pad(_expDiff_T_4, 3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 256:21 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 258:11]
    node _alignedSmall_T = dshr(normFracB, expDiff) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 266:31]
    node _alignedSmall_T_1 = dshr(normFracA, expDiff) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 270:31]
    node _GEN_0 = mux(expAGtB, normFracA, normFracB) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 264:17 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 265:18 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 269:18]
    node _GEN_1 = mux(expAGtB, _alignedSmall_T, _alignedSmall_T_1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 264:17 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 266:18 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 270:18]
    node _GEN_2 = mux(expAGtB, expA, expB) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 264:17 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 267:12 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 271:12]
    node alignedLarge = pad(_GEN_0, 3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 260:26]
    node alignedSmall = pad(_GEN_1, 3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 261:26]
    node _fracSum_T = add(alignedLarge, alignedSmall) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 275:30]
    node fracSum = tail(_fracSum_T, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 275:30]
    node carryOut = bits(fracSum, 2, 2) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 276:25]
    node _shiftedFrac_T = shr(fracSum, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 288:28]
    node expOut = _GEN_2 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 262:20]
    node _newExp_T = add(expOut, UInt<1>("h1")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 289:22]
    node _newExp_T_1 = tail(_newExp_T, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 289:22]
    node _T = bits(fracSum, 2, 2) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 290:21]
    node _T_1 = eq(_T, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 290:37]
    node _T_2 = bits(fracSum, 1, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 290:55]
    node _T_3 = eq(_T_2, UInt<1>("h1")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 290:67]
    node _T_4 = and(_T_1, _T_3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 290:45]
    node _shiftedFrac_T_1 = dshl(fracSum, lzc.io_out) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 296:28]
    node _newExp_T_2 = geq(expOut, lzc.io_out) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 297:26]
    node _newExp_T_3 = sub(expOut, lzc.io_out) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 297:46]
    node _newExp_T_4 = tail(_newExp_T_3, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 297:46]
    node _newExp_T_5 = mux(_newExp_T_2, _newExp_T_4, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 297:18]
    node _GEN_3 = mux(_T_4, fracSum, _shiftedFrac_T_1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 290:76 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 292:17 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 296:17]
    node _GEN_4 = mux(_T_4, expOut, _newExp_T_5) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 290:76 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 293:12 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 297:12]
    node _GEN_5 = mux(carryOut, _shiftedFrac_T, _GEN_3) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 286:18 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 288:17]
    node _GEN_6 = mux(carryOut, _newExp_T_1, _GEN_4) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 286:18 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 289:12]
    node shiftedFrac = bits(_GEN_5, 2, 0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 283:25]
    node normFrac = bits(shiftedFrac, 0, 0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 300:29]
    node newExp = _GEN_6 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 284:20]
    node result_hi = cat(UInt<1>("h0"), newExp) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 303:19]
    node result = cat(result_hi, normFrac) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 303:19]
    reg sr_valid_0 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sr_valid_0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 306:25]
    reg sr_data_0 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), sr_data_0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 307:20]
    node _GEN_7 = mux(io_valid_in, result, sr_data_0) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 307:20 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 313:21 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 314:16]
    node _T_5 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 326:11]
    node _T_6 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 327:11]
    node _T_7 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 328:11]
    node _T_8 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 330:11]
    node _T_9 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 331:11]
    node _T_10 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 332:11]
    node _T_11 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 334:11]
    node _T_12 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 335:11]
    node _T_13 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 336:11]
    node _T_14 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 337:11]
    node _T_15 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 338:11]
    node _T_16 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 340:11]
    node _T_17 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 341:11]
    node _T_18 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 343:11]
    node _T_19 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 345:13]
    node _T_20 = bits(fracSum, 2, 2) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 346:23]
    node _T_21 = eq(_T_20, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 346:39]
    node _T_22 = bits(fracSum, 1, 1) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 346:57]
    node _T_23 = eq(_T_22, UInt<1>("h1")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 346:69]
    node _T_24 = and(_T_21, _T_23) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 346:47]
    node _T_25 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 347:13]
    node _T_26 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 349:13]
    node _T_27 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 351:11]
    node _T_28 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 353:11]
    node _T_29 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 354:11]
    node _T_30 = eq(reset, UInt<1>("h0")) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 356:11]
    node _sr_valid_WIRE_0 = UInt<1>("h0") @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 306:33 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 306:33]
    io_out <= sr_data_0 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 322:10]
    io_valid_out <= sr_valid_0 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 321:16]
    lzc.clock <= clock
    lzc.reset <= reset
    lzc.io_in <= fracSum @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 280:13]
    sr_valid_0 <= mux(reset, _sr_valid_WIRE_0, io_valid_in) @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 306:25 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 306:25 \\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 310:15]
    sr_data_0 <= _GEN_7
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_5), UInt<1>("h1")), "[STEP 1: Extract Fields]\n") : printf @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 326:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_6), UInt<1>("h1")), "  A = %b => signA: %b | expA: %b | fracA: %b\n", io_in_a, signA, expA, fracA) : printf_1 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 327:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_7), UInt<1>("h1")), "  B = %b => signB: %b | expB: %b | fracB: %b\n", io_in_b, signB, expB, fracB) : printf_2 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 328:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_8), UInt<1>("h1")), "[STEP 2: Compare Exponents]\n") : printf_3 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 330:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_9), UInt<1>("h1")), "  expA: %d, expB: %d\n", expA, expB) : printf_4 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 331:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_10), UInt<1>("h1")), "  expDiff: %d => expAGtB: %b\n", expDiff, expAGtB) : printf_5 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 332:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_11), UInt<1>("h1")), "[STEP 3: Align Mantissas]\n") : printf_6 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 334:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_12), UInt<1>("h1")), "  normFracA (with hidden 1): %b\n", normFracA) : printf_7 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 335:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_13), UInt<1>("h1")), "  normFracB (with hidden 1): %b\n", normFracB) : printf_8 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 336:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_14), UInt<1>("h1")), "  alignedLarge: %b | alignedSmall: %b\n", alignedLarge, alignedSmall) : printf_9 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 337:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_15), UInt<1>("h1")), "  selectedExpOut: %d\n", expOut) : printf_10 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 338:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_16), UInt<1>("h1")), "[STEP 4: Add Aligned Mantissas]\n") : printf_11 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 340:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_17), UInt<1>("h1")), "  sum: %b (carryOut = %b)\n", fracSum, carryOut) : printf_12 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 341:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_18), UInt<1>("h1")), "[STEP 5: Normalize Result]\n") : printf_13 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 343:11]
    printf(clock, and(and(and(and(UInt<1>("h1"), io_valid_in), carryOut), _T_19), UInt<1>("h1")), "  CarryOut = 1 => shift right by 1\n") : printf_14 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 345:13]
    printf(clock, and(and(and(and(and(UInt<1>("h1"), io_valid_in), eq(carryOut, UInt<1>("h0"))), _T_24), _T_25), UInt<1>("h1")), "  Already normalized => no shift needed\n") : printf_15 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 347:13]
    printf(clock, and(and(and(and(and(UInt<1>("h1"), io_valid_in), eq(carryOut, UInt<1>("h0"))), eq(_T_24, UInt<1>("h0"))), _T_26), UInt<1>("h1")), "  No CarryOut => LZC = %d | shift left\n", lzc.io_out) : printf_16 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 349:13]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_27), UInt<1>("h1")), "  normFrac: %b | normExp: %d\n", normFrac, newExp) : printf_17 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 351:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_28), UInt<1>("h1")), "[STEP 6: Final Result Reassembly]\n") : printf_18 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 353:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_29), UInt<1>("h1")), "  Final result = %b\n", result) : printf_19 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 354:11]
    printf(clock, and(and(and(UInt<1>("h1"), io_valid_in), _T_30), UInt<1>("h1")), "[Cycle Info] bw = %d | pd = %d => valid_out: %b | output: %b\n", UInt<3>("h4"), UInt<1>("h1"), io_valid_out, io_out) : printf_20 @[\\REU Project Working\\Chisel-for-Fundamental-IC\\src\\main\\scala\\Fundamental_IC.scala 356:11]
