$date
2025-07-29T18:43+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module FPAdder $end
 $var wire 4 ! io_in_a $end
 $var wire 4 " io_in_b $end
 $var wire 2 # normExp $end
 $var wire 1 $ io_valid_in $end
 $var wire 3 % manA $end
 $var wire 3 & manB $end
 $var wire 2 ' expDiff $end
 $var wire 2 ( normMan $end
 $var wire 1 ) reset $end
 $var wire 2 * commonExp $end
 $var wire 4 + sum $end
 $var wire 4 , result $end
 $var wire 1 - validOutReg $end
 $var wire 4 . inAReg $end
 $var wire 4 / outReg $end
 $var wire 2 0 leadingOnePos $end
 $var wire 4 1 alignedManA $end
 $var wire 1 2 io_valid_out $end
 $var wire 4 3 alignedManB $end
 $var wire 1 4 clock $end
 $var wire 4 5 io_out $end
 $var wire 2 6 fracA $end
 $var wire 2 7 fracB $end
 $var wire 4 8 inBReg $end
 $var wire 1 9 printf $end
 $var wire 2 : expB $end
 $var wire 1 ; validReg0 $end
 $var wire 2 < expA $end
$upscope $end
$enddefinitions $end
$dumpvars
02
b00 7
b00 6
04
b00 <
b00 :
09
b00 0
0;
b00 (
b00 '
b00 *
b00 #
b000 &
b0000 "
b0000 !
b000 %
b0000 ,
b0000 +
b0000 5
b0000 3
0$
b0000 1
b0000 .
b0000 /
0)
b0000 8
0-
$end
#0
b11 #
1)
b1100 ,
#1
14
b1100 5
b1100 /
#6
04
0)
#11
14
#16
b0001 "
1$
04
#21
b01 0
b00 #
b0100 3
14
b001 &
b01 7
b0001 8
b0100 +
1;
b0000 ,
#26
b0010 !
b0011 "
04
#31
b010 %
b011 &
1-
b0010 .
b0000 /
b1000 1
12
b1100 3
14
b0000 5
b10 6
b11 7
b0011 8
#36
b0100 !
b0101 "
04
#41
b01 #
b100 %
b101 &
b01 *
b0100 ,
b0100 .
b0000 1
b0100 3
14
b00 6
b01 7
b0101 8
b01 :
b01 <
#46
b0110 !
b0111 "
04
#51
b1000 1
b1100 3
14
b110 %
b0100 5
b111 &
b10 6
b11 7
b0111 8
b0110 .
b0100 /
#56
0$
04
#61
14
0;
#66
04
#71
02
14
0-
#76
04
#81
14
#86
04
